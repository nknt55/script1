import re
import time
import json
import os
import html
from datetime import datetime, timedelta, timezone
from telethon.sync import TelegramClient, events
from telethon.tl.types import MessageEntityTextUrl

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = '22778366'
API_HASH = 'a3074955a868b3eea3aaeb81435ee044'
PHONE = '+79363009030'
KEYWORDS = ['–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–∫–æ–Ω–¥–µ–π', '–∫–∞–Ω–¥–µ–π', '–º–æ–Ω—Ç–∞–∂', '–º–æ–Ω—Ç–∞–∂–Ω–∏–∫',
            '—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '—Å–ø–ª–∏—Ç', '–º—É–ª—å—Ç-—Å–ø–ª–∏—Ç', '–º—É–ª—å—Ç–∏—Å–ø–ª–∏—Ç', '–º—É–ª—å—Ç']
STATE_FILE = 'monitor_state.json'
TARGET_CHAT_NAME = "–ö–ª—é—á–∏"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
MONITOR_START_TIME = datetime.now(timezone.utc)


def get_time_delta():
    print("\n" + "=" * 40)
    print("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
    print("0 - –í—Å–µ –≤—Ä–µ–º—è\n1 - –î–µ–Ω—å\n2 - 3 –¥–Ω—è\n3 - –ù–µ–¥–µ–ª—è\n4 - –ú–µ—Å—è—Ü—ã")
    print("=" * 40)

    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (0-4): ")
        now = datetime.now(timezone.utc)

        if choice == '0':
            return None
        elif choice == '1':
            return now - timedelta(days=1)
        elif choice == '2':
            return now - timedelta(days=3)
        elif choice == '3':
            return now - timedelta(weeks=1)
        elif choice == '4':
            months = int(input("–ú–µ—Å—è—Ü–µ–≤: "))
            return now - timedelta(days=months * 30)
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")


def format_time(dt: datetime) -> str:
    local_dt = dt.astimezone()
    return local_dt.strftime("%Y-%m-%d %H:%M")


def format_relative_time(dt: datetime) -> str:
    now = datetime.now(timezone.utc)
    diff = now - dt

    if diff < timedelta(minutes=1):
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif diff < timedelta(hours=1):
        minutes = diff.seconds // 60
        return f"{minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
    elif diff < timedelta(days=1):
        hours = diff.seconds // 3600
        return f"{hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
    else:
        days = diff.days
        return f"{days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"


def get_message_link(message):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if hasattr(message.chat, 'username') and message.chat.username:
        return f"https://t.me/{message.chat.username}/{message.id}"
    else:
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤
        chat_id = str(message.chat.id).replace('-100', '')
        return f"https://t.me/c/{chat_id}/{message.id}"


def create_notification_text(message, chat_title):
    relative_time = format_relative_time(message.date)
    exact_time = format_time(message.date)
    message_link = get_message_link(message)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    if message.sender:
        author_name = f"{message.sender.first_name or ''} {message.sender.last_name or ''}".strip()
    else:
        author_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É
    formatted_text = f"<blockquote>{html.escape(message.text)}</blockquote>" if message.text else ""

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    text = (
        f"üîë <b>–ß–∞—Ç</b>: {html.escape(chat_title)}\n\n"
        f"‚è± <b>–í—Ä–µ–º—è</b>: {relative_time} ({exact_time})\n"
        f"üë§ <b>–ê–≤—Ç–æ—Ä</b>: {html.escape(author_name)}\n\n"
        f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ</b>:\n"
        f"{formatted_text}\n\n"
        f'<a href="{message_link}">üëâ –ü–ï–†–ï–ô–¢–ò –ö –°–û–û–ë–©–ï–ù–ò–Æ üëà</a>'
    )
    return text, message_link


def find_target_chat(client, name):
    for dialog in client.iter_dialogs():
        if dialog.name.lower() == name.lower():
            return dialog.entity
    return None


def ensure_target_chat(client):
    target_chat = find_target_chat(client, TARGET_CHAT_NAME)
    if target_chat:
        return target_chat

    print(f"‚ö†Ô∏è –ß–∞—Ç '{TARGET_CHAT_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
    try:
        new_chat = client.create_channel(
            TARGET_CHAT_NAME,
            "–ß–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö"
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: {TARGET_CHAT_NAME}")
        return new_chat
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: {e}")
        return None


def load_state():
    try:
        with open(STATE_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"processed_messages": {}}


def save_state(state):
    with open(STATE_FILE, 'w') as f:
        json.dump(state, f)


def historical_search(client, time_filter, target_chat=None):
    print("\n" + "=" * 40)
    print("üîç –ó–∞–ø—É—â–µ–Ω –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
    print("=" * 40 + "\n")

    dialogs = []
    for dialog in client.iter_dialogs():
        if dialog.is_group or dialog.is_channel:
            dialogs.append(dialog)

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
    pattern = re.compile('|'.join(map(re.escape, KEYWORDS)), re.IGNORECASE)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
    for dialog in dialogs:
        chat = dialog.entity
        chat_title = getattr(chat, 'title', f"ID:{chat.id}")

        try:
            offset_id = 0
            while True:
                messages = client.get_messages(chat, limit=100, offset_id=offset_id)
                if not messages:
                    break

                offset_id = messages[-1].id

                for message in messages:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                    if time_filter and message.date < time_filter:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    if message.text and pattern.search(message.text):
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        notification_text, message_link = create_notification_text(message, chat_title)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        try:
                            # –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                            client.send_message(
                                'me',
                                notification_text,
                                parse_mode='html'
                            )

                            # –í —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç "–ö–ª—é—á–∏"
                            if target_chat:
                                client.send_message(
                                    target_chat,
                                    notification_text,
                                    parse_mode='html',
                                    link_preview=False
                                )
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–∞—á–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                break

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {chat_title}: {str(e)}")

    print("\n‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")


def online_monitor(client, target_chat=None):
    print("\n" + "=" * 40)
    print("üîç –ó–∞–ø—É—â–µ–Ω –æ–Ω–ª–∞–π–Ω-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("=" * 40 + "\n")
    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞.")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = load_state()
    processed_messages = state.get("processed_messages", {})

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
    pattern = re.compile('|'.join(map(re.escape, KEYWORDS)), re.IGNORECASE)

    # –°–±–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤
    dialogs = []
    for dialog in client.iter_dialogs():
        if dialog.is_group or dialog.is_channel:
            dialogs.append(dialog)
            chat_id = dialog.entity.id
            str_chat_id = str(chat_id)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if str_chat_id not in processed_messages:
                processed_messages[str_chat_id] = []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = {"processed_messages": processed_messages}
    save_state(state)

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage(chats=[d.entity for d in dialogs]))
    async def handler(event):
        message = event.message
        chat = await event.get_chat()
        chat_id = chat.id
        str_chat_id = str(chat_id)
        chat_title = getattr(chat, 'title', str(chat_id))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if message.date < MONITOR_START_TIME:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if str_chat_id in processed_messages and message.id in processed_messages[str_chat_id]:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        if str_chat_id not in processed_messages:
            processed_messages[str_chat_id] = []
        processed_messages[str_chat_id].append(message.id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = {"processed_messages": processed_messages}
        save_state(state)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if message.text and pattern.search(message.text):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_text, message_link = create_notification_text(message, chat_title)

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                await client.send_message(
                    'me',
                    notification_text,
                    parse_mode='html'
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç "–ö–ª—é—á–∏"
                if target_chat:
                    await client.send_message(
                        target_chat,
                        notification_text,
                        parse_mode='html',
                        link_preview=False
                    )
                else:
                    print("‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π —á–∞—Ç '–ö–ª—é—á–∏' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

            print(f"üîî –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_title}!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    client.run_until_disconnected()


def main():
    print("\n" + "=" * 40)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1 - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
    print("2 - –û–Ω–ª–∞–π–Ω-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)")
    print("3 - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π + –æ–Ω–ª–∞–π–Ω)")
    print("=" * 40)

    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ")
    if choice not in ['1', '2', '3']:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    with TelegramClient('session', API_ID, API_HASH) as client:
        client.start(PHONE)
        target_chat = ensure_target_chat(client)

        if choice == '1':
            # –¢–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            time_filter = get_time_delta()
            historical_search(client, time_filter, target_chat)

        elif choice == '2':
            # –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            online_monitor(client, target_chat)

        elif choice == '3':
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            time_filter = get_time_delta()
            historical_search(client, time_filter, target_chat)
            print("\n‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º...")
            online_monitor(client, target_chat)


if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not os.path.exists(STATE_FILE):
        with open(STATE_FILE, 'w') as f:
            json.dump({"processed_messages": {}}, f)

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    main()